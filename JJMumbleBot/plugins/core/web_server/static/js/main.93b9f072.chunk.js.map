{"version":3,"sources":["components/theme_selectors/GlobalStyles.js","components/theme_selectors/Themes.js","components/set_title.js","components/theme_selectors/ThemeToggler.js","components/CommandInputGrid.js","components/command_history.js","components/latest_command.js","components/plugins_list.js","logo.svg","components/CommandInputDiv.js","components/nav_bar.js","App.js","components/theme_selectors/UseDarkMode.js","reportWebVitals.js","index.js"],"names":["GlobalStyles","createGlobalStyle","theme","body","text","lightTheme","accent_primary","accent_secondary","contrast","contrast2","toggleForeground","toggleBackground","black","white","darkTheme","SetTitle","getBotName","fetch","headers","then","res","ok","Promise","reject","json","json_data","document","title","data","name","catch","e","console","trace","this","React","Component","styled","Switch","BrightnessHighRoundedIcon","Toggle","toggleTheme","themeText","FormGroup","FormControlLabel","control","checked","onChange","label","ThemedTextField","TextField","ThemedSubmitButton","Button","ThemedIconButton","IconButton","ThemedPaper","Paper","CommandFormGrid","props","refreshBotDetails","log","setState","botName","botCommandToken","command_token","updateCommandText","evt","commandText","target","value","cmdIsValid","sendCommand","preventDefault","sentCmd","state","method","JSON","stringify","status","length","charAt","cmdInvalid","invalidCmdText","bind","url","Grid","item","xs","onSubmit","autoComplete","InputLabelProps","className","variant","type","fullWidth","placeholder","error","InputProps","endAdornment","component","disabled","onClick","endIcon","style","width","height","RefreshButton","ThemedTable","Table","ThemedTableCell","TableCell","ThemedAlert","Alert","CommandHistory","getCommandHistory","useAlert","cmd_history","showAlert","alertMsg","alertSeverity","closeAlert","prev_props","prev_state","socketData","last_cmd_output","alert","onClose","severity","Collapse","in","TableContainer","TableHead","TableRow","id","size","TableBody","map","index","scope","LatestCommand","last_cmd_type","last_cmd","Object","keys","Parser","PluginsList","refreshPlugins","plugins","items","sm","div","ThemedTabs","Tabs","ThemedToolbar","Toolbar","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","Typography","tabProps","TopNavBar","newVal","AppBar","position","handleChange","Tab","themeToggle","tabs","container","spacing","direction","alignItems","subitem","ThemedJSONViewer","ReactJson","ThemedErrorAlert","ThemedIconAlert","App","webSocket","useRef","useState","connectionError","setConnectionError","connectionErrorMsg","setConnectionErrorMsg","setSocketData","setTheme","setMode","mode","window","localStorage","setItem","useEffect","localTheme","getItem","UseDarkMode","themeToggler","themeMode","current","WebSocket","format","protocol","location","hostname","port","pathname","slashes","onerror","onmessage","msg","parse","Snackbar","anchorOrigin","vertical","horizontal","open","action","reload","src","iconStyle","collapsed","displayDataTypes","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.93b9f072.chunk.js","sourcesContent":["import { createGlobalStyle} from \"styled-components\"\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    font-family: Tahoma, Helvetica, Arial, Roboto, sans-serif;\r\n    transition: all 0.25s ease;\r\n  }\r\n  `","export const lightTheme = {\r\n    body: '#FFF',\r\n    text: '#363537',\r\n    accent_primary: '#00c9bc',\r\n    accent_secondary: '#c9005e',\r\n    contrast: \"#fff\",\r\n    contrast2: \"#fff\",\r\n    toggleForeground: '#fff',\r\n    toggleBackground: '#363537',\r\n    black: \"#000\",\r\n    white: \"#fff\"\r\n}\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    accent_primary: '#00c9bc',\r\n    accent_secondary: '#c9005e',\r\n    contrast: \"#202021\",\r\n    contrast2: \"#000\",\r\n    toggleForeground: '#fff',\r\n    toggleBackground: '#363537',\r\n    black: \"#000\",\r\n    white: \"#fff\"\r\n}\r\n","import React from 'react';\r\n\r\nclass SetTitle extends React.Component {\r\n    componentDidMount() {\r\n        this.getBotName();\r\n    }\r\n\r\n    getBotName = () => {\r\n        fetch('/api/general/name', {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              }\r\n        })\r\n        .then(res => (res.ok ? res : Promise.reject(res)))\r\n        .then(res => res.json())\r\n        .then(json_data => document.title = `${json_data.data.name} Dashboard`)\r\n        .catch(e => {\r\n            console.trace(e);\r\n            document.title = `JJMumbleBot Dashboard`;\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return(<div/>);\r\n    }\r\n}\r\n\r\nexport default SetTitle;","import React from 'react';\r\nimport { func, string } from 'prop-types';\r\nimport styled from \"styled-components\"\r\nimport BrightnessHighRoundedIcon from '@material-ui/icons/BrightnessHighRounded';\r\nimport NightsStayRoundedIcon from '@material-ui/icons/NightsStayRounded';\r\nimport {Switch, FormGroup, FormControlLabel} from '@material-ui/core';\r\n\r\n\r\nconst ThemedSwitch = styled(Switch)`\r\n  background-color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nconst ThemedDayIcon = styled(BrightnessHighRoundedIcon)`\r\n  color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nconst Toggle = ({theme, themeText, toggleTheme }) => {\r\n\r\n    return (\r\n      <FormGroup>\r\n        <FormControlLabel control={<Switch\r\n            checked={theme === 'dark' ? true : false}\r\n            onChange={toggleTheme} \r\n            name=\"darkModeChecked\" \r\n          />} label=\"Dark Mode\">\r\n        </FormControlLabel>\r\n      </FormGroup>\r\n    );\r\n};\r\nToggle.propTypes = {\r\n    theme: string.isRequired,\r\n    themeText: string.isRequired,\r\n    toggleTheme: func.isRequired,\r\n}\r\nexport default Toggle;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn'; \r\nimport {TextField, IconButton, Grid, Paper} from '@material-ui/core';\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst ThemedTextField = styled(TextField)`\r\n    & label {\r\n        color: ${({ theme }) => theme.text};\r\n    }\r\n    & input {\r\n        color: ${({ theme }) => theme.text};\r\n        width: 100%;\r\n    }\r\n`;\r\nconst ThemedSubmitButton = styled(Button)`\r\n    background-color: ${({ theme }) => theme.contrast};\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.accent_secondary};\r\n        color: ${({ theme }) => theme.white};\r\n    }\r\n`;\r\nconst ThemedIconButton = styled(IconButton)`\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n        color: ${({ theme }) => theme.text};\r\n    }\r\n`;\r\n\r\nconst ThemedPaper = styled(Paper)`\r\n    display: 'block';\r\n    padding: 0.2em;\r\n    background-color: ${({ theme }) => theme.body};\r\n`;\r\n\r\n\r\nclass CommandFormGrid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            botName: '',\r\n            botCommandToken: '',\r\n            commandText: '',\r\n            cmdInvalid: true,\r\n            invalidCmdText: '',\r\n            sentCmd: ''\r\n        }\r\n        this.updateCommandText = this.updateCommandText.bind(this);\r\n        this.sendCommand = this.sendCommand.bind(this);\r\n    }\r\n\r\n    refreshBotDetails = () => {\r\n        fetch('/api/general', {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              }\r\n        })\r\n        .then(res => (res.ok ? res : Promise.reject(res)))\r\n        .then(res => res.json())\r\n        .then(json_data => {\r\n            console.log(json_data.data);\r\n            this.setState({botName: json_data.data.name});\r\n            this.setState({botCommandToken: json_data.data.command_token});\r\n        }).catch(e => {\r\n            console.log(e);\r\n            this.setState({botName: 'N/A'});\r\n            this.setState({botCommandToken: '!'});\r\n        });\r\n    };\r\n\r\n    updateCommandText = (evt) => {\r\n        this.setState({commandText: evt.target.value})\r\n        if (this.cmdIsValid()) {\r\n            this.setState({cmdIsValid: true});\r\n        }\r\n        else {\r\n            this.setState({cmdIsValid: false});\r\n        }\r\n    }\r\n\r\n    sendCommand = (evt) => {\r\n        evt.preventDefault();\r\n        if (this.cmdIsValid()) {\r\n            this.setState({sentCmd: this.state.commandText});\r\n\r\n            fetch(`/api/command`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\"text\": this.state.commandText})\r\n            })\r\n            .then(res => (res.ok ? res : Promise.reject(res)))\r\n            .then(res => res.json())\r\n            .then(json_data => {\r\n                console.log(json_data.status);\r\n            })\r\n            .catch(e => console.log(e));\r\n            this.setState({commandText: ''});\r\n        }\r\n        else {\r\n            this.setState({commandText: ''});\r\n        }\r\n        this.setState({cmdIsValid: false});\r\n    }\r\n\r\n    cmdIsValid = () => {\r\n        if (this.state.commandText.length > 0 && this.state.commandText.charAt(0) === this.state.botCommandToken) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshBotDetails(this.props.url);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs={12}>\r\n                <ThemedPaper>\r\n                <form onSubmit={this.sendCommand} autoComplete=\"off\">\r\n                    <ThemedTextField\r\n                        InputLabelProps={{className: \"label-field\"}}\r\n                        variant=\"outlined\"\r\n                        value={this.state.commandText}\r\n                        type=\"text\"\r\n                        fullWidth={true}\r\n                        onChange={this.updateCommandText}\r\n                        placeholder={`${this.state.botCommandToken}command ...`}\r\n                        label={(!this.cmdIsValid() && this.state.commandText.length > 0) ? `Invalid command! Format: ${this.state.botCommandToken}command ...` : `Send commands to ${this.state.botName} from here...`}\r\n                        error={this.state.commandText.charAt(0) !== this.state.botCommandToken && this.state.commandText.length > 0}\r\n                        InputProps={\r\n                            {endAdornment: \r\n                                this.props.type === 'compact' ? \r\n                                <ThemedIconButton component=\"span\"\r\n                                type=\"submit\"\r\n                                disabled={!this.cmdIsValid}\r\n                                onClick={this.sendCommand}>\r\n                                    <KeyboardReturnIcon/>\r\n                                </ThemedIconButton> :\r\n                                <ThemedSubmitButton component=\"span\"\r\n                                    endIcon={<KeyboardReturnIcon />}\r\n                                    type=\"submit\" \r\n                                    variant=\"contained\" \r\n                                    style={{width: '150px', height:'40px'}}\r\n                                    disabled={!this.cmdIsValid}\r\n                                    onClick={this.sendCommand}>\r\n                                    Send\r\n                                </ThemedSubmitButton>\r\n                            }\r\n                        }\r\n                    />                        \r\n                </form>\r\n                </ThemedPaper>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommandFormGrid;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Collapse, Grid} from '@material-ui/core';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Alert} from '@material-ui/lab';\r\n\r\n\r\nconst RefreshButton = styled(IconButton)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.accent_secondary};\r\n        color: ${({ theme }) => theme.white};\r\n    }\r\n`;\r\nconst ThemedTable = styled(Table)`\r\n    .tableHead {\r\n        background: ${({ theme }) => theme.contrast2};\r\n    }\r\n    .outTableBody {\r\n        height: 100px;\r\n        overflow: hide;\r\n    }\r\n`;\r\nconst ThemedTableCell = styled(TableCell)`\r\n    background-color: ${({ theme }) => theme.contrast};\r\n    color: ${({ theme }) => theme.text};   \r\n`;\r\nconst ThemedAlert = styled(Alert)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nclass CommandHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showAlert: false,\r\n            alertMsg: \"\",\r\n            alertSeverity: \"\",\r\n            cmd_history: []\r\n        };\r\n    }\r\n\r\n    getCommandHistory = (useAlert) => {\r\n        fetch('/api/cmdhistory', {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        .then(res => (res.ok ? res : Promise.reject(res)))\r\n        .then(res => res.json())\r\n        .then(json_data => {\r\n            this.setState({cmd_history: json_data.data.cmd_history});\r\n            if (useAlert) {\r\n                this.setState({showAlert: true, alertMsg: \"Successfully refreshed the command history list!\", alertSeverity: \"success\"});\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n            this.setState({cmd_history: []});\r\n            this.setState({showAlert: true, alertMsg: \"Error retrieving the command history list!\", alertSeverity: \"error\"});\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCommandHistory(false);\r\n    }\r\n\r\n    componentDidUpdate(prev_props, prev_state) {\r\n        if (prev_props.socketData.last_cmd_output !== this.props.socketData.last_cmd_output) {\r\n            this.getCommandHistory(false);\r\n            console.log(this.props.socketData);\r\n        }\r\n    }\r\n\r\n    closeAlert = () => {\r\n        this.setState({showAlert: false, alertMsg: \"\", alertSeverity: \"\"});\r\n    }\r\n\r\n    render() {\r\n        let alert = this.state.showAlert ? <ThemedAlert onClose={this.closeAlert} severity={this.state.alertSeverity}>{this.state.alertMsg}</ThemedAlert> : \"\";\r\n        return (\r\n            <Grid item xs>\r\n                <Collapse in={this.state.showAlert}>\r\n                    {alert}\r\n                </Collapse>\r\n                <TableContainer component={Paper}>\r\n                    <ThemedTable className=\"cmdTable\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <ThemedTableCell className=\"tableHead\">\r\n                                    <b>Command History:</b>\r\n                                    <RefreshButton \r\n                                    id=\"refreshCmdHistoryButton\" \r\n                                    onClick={() => this.getCommandHistory(true)}\r\n                                    size=\"small\"\r\n                                    >\r\n                                        <LoopIcon />\r\n                                    </RefreshButton>\r\n                                </ThemedTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody className=\"tableBody\">\r\n                            {\r\n                                this.state.cmd_history.map((item, index) => \r\n                                (\r\n                                    <TableRow key={item+index}>\r\n                                        <ThemedTableCell component=\"td\" scope=\"row\" className=\"cmdHistoryCmdCell\">\r\n                                        {item}\r\n                                        </ThemedTableCell>\r\n                                    </TableRow>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </ThemedTable>\r\n                </TableContainer>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommandHistory;","import React from 'react';\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Collapse, Grid} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport Parser from 'html-react-parser';\r\n\r\n\r\nconst ThemedTable = styled(Table)`\r\n    .tableHead {\r\n        background: ${({ theme }) => theme.contrast2};\r\n    }\r\n    .outTableBody {\r\n        height: 100px;\r\n        overflow: hide;\r\n    }\r\n`;\r\nconst ThemedTableCell = styled(TableCell)`\r\n    background-color: ${({ theme }) => theme.contrast};\r\n    color: ${({ theme }) => theme.text};   \r\n`;\r\n\r\nclass LatestCommand extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            last_cmd_type: \"\",\r\n            last_cmd: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.socketData);\r\n        if (Object.keys(this.props.socketData).length !== 0) {\r\n            this.setState({\r\n                last_cmd: this.props.socketData.last_cmd_output,\r\n                last_cmd_type: this.props.socketData.last_cmd_type,\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prev_props, prev_state) {\r\n        if (prev_props.socketData.last_cmd_output !== this.props.socketData.last_cmd_output) {\r\n            this.setState({\r\n                last_cmd: this.props.socketData.last_cmd_output,\r\n                last_cmd_type: this.props.socketData.last_cmd_type,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid item xs>\r\n                <TableContainer component={Paper}>\r\n                    <ThemedTable className=\"cmdTable\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <ThemedTableCell className=\"tableHead\">\r\n                                    <b>Latest Command Output {this.state.last_cmd_type}:</b>\r\n                                </ThemedTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody className=\"tableBody\">\r\n                            <TableRow>\r\n                                <ThemedTableCell className=\"recentCmdCell\">\r\n                                    {Parser(this.state.last_cmd)}\r\n                                </ThemedTableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </ThemedTable>\r\n                </TableContainer>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LatestCommand;","import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport {Alert} from '@material-ui/lab';\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Collapse, Grid} from '@material-ui/core';\r\n\r\n\r\nconst RefreshButton = styled(IconButton)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.accent_secondary};\r\n        color: ${({ theme }) => theme.white};\r\n    }\r\n`;\r\n\r\nconst ThemedAlert = styled(Alert)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nconst ThemedTable = styled(Table)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    th {\r\n        background: ${({ theme }) => theme.contrast2};\r\n    }\r\n`;\r\nconst ThemedTableCell = styled(TableCell)`\r\n    background-color: ${({ theme }) => theme.contrast};\r\n    color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nclass PluginsList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showAlert: false,\r\n            alertMsg: \"\",\r\n            alertSeverity: \"\",\r\n            items: []\r\n        }\r\n    }\r\n\r\n    refreshPlugins = (url, useAlert) => {\r\n        fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              }\r\n        })\r\n        .then(res => (res.ok ? res : Promise.reject(res)))\r\n        .then(res => res.json())\r\n        .then(json_data => {\r\n            // setItemsLength(res.plugins.length);\r\n            console.log(json_data.data.plugins);\r\n            this.setState({items: json_data.data.plugins});\r\n            if (useAlert) {\r\n                this.setState({showAlert: true, alertMsg: \"Successfully refreshed the plugins list!\", alertSeverity: \"success\"});\r\n            }\r\n        }).catch(e => {\r\n            console.log(e);\r\n            this.setState({showAlert: true, alertMsg: \"Error retrieving the plugins list!\", alertSeverity: \"error\"});\r\n        });\r\n    };\r\n\r\n    closeAlert = () => {\r\n        this.setState({showAlert: false, alertMsg: \"\", alertSeverity: \"\"});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshPlugins('/api/plugins', false);\r\n    }\r\n\r\n    render() {\r\n        let alert = this.state.showAlert ? <ThemedAlert onClose={this.closeAlert} severity={this.state.alertSeverity}>{this.state.alertMsg}</ThemedAlert> : \"\";\r\n        return (\r\n            <Grid item xs={12} sm={4}>\r\n                <Collapse in={this.state.showAlert}>\r\n                    {alert}\r\n                </Collapse>\r\n                <TableContainer component={Paper}>\r\n                    <ThemedTable>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <ThemedTableCell component=\"th\">\r\n                                    <b>Active Plugins:</b>  \r\n                                    <RefreshButton \r\n                                    id=\"refreshButton\" \r\n                                    onClick={() => this.refreshPlugins('/api/plugins', true)}\r\n                                    size=\"small\"\r\n                                    >\r\n                                        <LoopIcon />\r\n                                    </RefreshButton>\r\n                                </ThemedTableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                this.state.items.map(item => \r\n                                (\r\n                                    <TableRow key={item}>\r\n                                        <ThemedTableCell component=\"td\" scope=\"row\">\r\n                                        {item}\r\n                                        </ThemedTableCell>\r\n                                    </TableRow>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </ThemedTable>\r\n                </TableContainer>\r\n            </Grid>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default PluginsList;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn'; \r\nimport {TextField, IconButton, Grid, Paper} from '@material-ui/core';\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst ThemedTextField = styled(TextField)`\r\n    & label {\r\n        color: ${({ theme }) => theme.text};\r\n    }\r\n    & input {\r\n        color: ${({ theme }) => theme.text};\r\n    }\r\n`;\r\nconst ThemedSubmitButton = styled(Button)`\r\n    background-color: ${({ theme }) => theme.contrast};\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.accent_secondary};\r\n        color: ${({ theme }) => theme.white};\r\n    }\r\n`;\r\nconst ThemedIconButton = styled(IconButton)`\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n        color: ${({ theme }) => theme.text};\r\n    }\r\n`;\r\n\r\nconst ThemedDiv = styled.div`\r\n    display: 'block';\r\n    padding: 0.2em;\r\n    background-color: ${({ theme }) => theme.body};\r\n`;\r\n\r\n\r\nclass CommandFormDiv extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            botName: '',\r\n            botCommandToken: '',\r\n            commandText: '',\r\n            cmdInvalid: true,\r\n            invalidCmdText: '',\r\n            sentCmd: ''\r\n        }\r\n        this.updateCommandText = this.updateCommandText.bind(this);\r\n        this.sendCommand = this.sendCommand.bind(this);\r\n    }\r\n\r\n    refreshBotDetails = () => {\r\n        fetch('/api/general', {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              }\r\n        })\r\n        .then(res => (res.ok ? res : Promise.reject(res)))\r\n        .then(res => res.json())\r\n        .then(json_data => {\r\n            console.log(json_data.data);\r\n            this.setState({botName: json_data.data.name});\r\n            this.setState({botCommandToken: json_data.data.command_token});\r\n        }).catch(e => {\r\n            console.log(e);\r\n            this.setState({botName: 'N/A'});\r\n            this.setState({botCommandToken: '!'});\r\n        });\r\n    };\r\n\r\n    updateCommandText = (evt) => {\r\n        this.setState({commandText: evt.target.value})\r\n        if (this.cmdIsValid()) {\r\n            this.setState({cmdIsValid: true});\r\n        }\r\n        else {\r\n            this.setState({cmdIsValid: false});\r\n        }\r\n    }\r\n\r\n    sendCommand = (evt) => {\r\n        evt.preventDefault();\r\n        if (this.cmdIsValid()) {\r\n            this.setState({sentCmd: this.state.commandText});\r\n\r\n            fetch(`/api/command`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\"text\": this.state.commandText})\r\n            })\r\n            .then(res => (res.ok ? res : Promise.reject(res)))\r\n            .then(res => res.json())\r\n            .then(json_data => {\r\n                console.log(json_data.status);\r\n            })\r\n            .catch(e => console.log(e));\r\n            this.setState({commandText: ''});\r\n        }\r\n        else {\r\n            this.setState({commandText: ''});\r\n        }\r\n        this.setState({cmdIsValid: false});\r\n    }\r\n\r\n    cmdIsValid = () => {\r\n        if (this.state.commandText.length > 0 && this.state.commandText.charAt(0) === this.state.botCommandToken) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshBotDetails(this.props.url);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.sendCommand} autoComplete=\"off\">\r\n                    <ThemedTextField\r\n                        InputLabelProps={{className: \"label-field\"}}\r\n                        variant=\"outlined\"\r\n                        value={this.state.commandText}\r\n                        type=\"text\"\r\n                        fullWidth={true}\r\n                        onChange={this.updateCommandText}\r\n                        placeholder={`${this.state.botCommandToken}command ...`}\r\n                        label={(!this.cmdIsValid() && this.state.commandText.length > 0) ? `Invalid command! Format: ${this.state.botCommandToken}command ...` : `Send commands to ${this.state.botName} from here...`}\r\n                        error={this.state.commandText.charAt(0) !== this.state.botCommandToken && this.state.commandText.length > 0}\r\n                        InputProps={\r\n                            {endAdornment: \r\n                                this.props.type === 'compact' ? \r\n                                <ThemedIconButton component=\"span\"\r\n                                type=\"submit\"\r\n                                size=\"small\"\r\n                                fullWidth={true}\r\n                                disabled={!this.cmdIsValid}\r\n                                onClick={this.sendCommand}>\r\n                                    <KeyboardReturnIcon size=\"small\"/>\r\n                                </ThemedIconButton> :\r\n                                <ThemedSubmitButton component=\"span\"\r\n                                    endIcon={<KeyboardReturnIcon />}\r\n                                    type=\"submit\" \r\n                                    variant=\"contained\" \r\n                                    size=\"small\"\r\n                                    disabled={!this.cmdIsValid}\r\n                                    onClick={this.sendCommand}>\r\n                                    Send\r\n                                </ThemedSubmitButton>\r\n                            }\r\n                        }\r\n                    />                        \r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CommandFormDiv;","import React from 'react';\r\nimport {AppBar, Tabs, Tab, Box, Typography, Toolbar, Grid} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport logo from '../logo.svg';\r\nimport CommandFormDiv from './CommandInputDiv';\r\nimport Toggle from \"./theme_selectors/ThemeToggler\";\r\n\r\n\r\nconst ThemedTabs = styled(Tabs)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nconst ThemedToolbar = styled(Toolbar)`\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    display: flex;\r\n    justify-content: space-between;\r\n    *:focus {\r\n        outline: 0 !important;\r\n    }\r\n`;\r\n\r\nconst TabPanel = (props) => {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`simple-tabpanel-${index}`}\r\n        aria-labelledby={`simple-tab-${index}`}\r\n        {...other}\r\n        >\r\n        {value === index && (\r\n            <Box p={3}>\r\n            <Typography component={'span'}>{children}</Typography>\r\n            </Box>\r\n        )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst tabProps = (index) => {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nclass TopNavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: 0,\r\n            title: \"JJMumbleBot Dashboard\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getBotName();\r\n    }\r\n\r\n    getBotName = () => {\r\n        fetch('/api/general/name', {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              }\r\n        })\r\n        .then(res => (res.ok ? res : Promise.reject(res)))\r\n        .then(res => res.json())\r\n        .then(json_data => this.setState({title: `${json_data.data.name} Dashboard`}))\r\n        .catch(e => {\r\n            console.trace(e);\r\n            this.setState({title: 'JJMumbleBot Dashboard'});\r\n        });\r\n    };\r\n\r\n    handleChange(evt, newVal) {\r\n        this.setState({value: newVal});\r\n    }\r\n    //<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    render() {\r\n        return (\r\n            <div className=\"top-nav-bar\">\r\n                <AppBar position=\"static\">\r\n                    <ThemedToolbar>\r\n                        <Typography variant=\"h6\">{this.state.title}</Typography>\r\n                        <ThemedTabs value={this.state.value} onChange={this.handleChange.bind(this)}>\r\n                            <Tab key=\"tab-commands\" label=\"Commands\" {...tabProps(0)} />\r\n                            <Tab key=\"tab-plugins\" label=\"Plugins\" {...tabProps(1)} />\r\n                            <Tab key=\"tab-debug\" label=\"Debug\" {...tabProps(2)} />\r\n                        </ThemedTabs>\r\n                        {this.props.themeToggle} \r\n                    </ThemedToolbar>\r\n                </AppBar>\r\n                {\r\n                    this.props.tabs.map((item, index) => \r\n                    <TabPanel value={this.state.value} index={index} key={`${index}-panel`}>\r\n                        <Grid container spacing={3} \r\n                            direction=\"row\"\r\n                            alignItems=\"flex-start\" key={`${index}-grid`}>\r\n                        {item.map(subitem => subitem)}\r\n                        </Grid>\r\n                    </TabPanel>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopNavBar;","import React, {useEffect, useState, useRef} from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"./components/theme_selectors/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./components/theme_selectors/Themes\";\nimport { UseDarkMode } from \"./components/theme_selectors/UseDarkMode\";\nimport SetTitle from \"./components/set_title\";\nimport Toggle from \"./components/theme_selectors/ThemeToggler\";\nimport CommandFormGrid from './components/CommandInputGrid';\nimport CommandHistory from './components/command_history';\nimport LatestCommand from './components/latest_command';\nimport ReactJson from 'react-json-view';\nimport PluginsList from './components/plugins_list';\nimport TopNavBar from \"./components/nav_bar\";\nimport styled from 'styled-components';\nimport {Snackbar, IconButton} from '@material-ui/core';\nimport {Alert} from '@material-ui/lab';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport './App.css';\nimport url from 'url';\n\n//let socket = new WebSocket(\"ws://192.168.1.200:7000/ws\");\n\n// localStorage.clear();\n\nconst ThemedJSONViewer = styled(ReactJson)`\n  background-color: ${({ theme }) => theme.body};\n  color: ${({ theme }) => theme.text};\n`;\nconst ThemedErrorAlert = styled(Alert)`\n  background-color: ${({ theme }) => theme.black};\n  color: ${({ theme }) => theme.white};\n`;\nconst ThemedIconAlert = styled(IconButton)`\n  color: ${({ theme }) => theme.white};\n`;\n\nfunction App() {\n  const webSocket = useRef(null);\n  const [connectionError, setConnectionError] = useState(false);\n  const [connectionErrorMsg, setConnectionErrorMsg] = useState(\"\");\n  const [socketData, setSocketData] = useState({});\n\n  const [theme, themeToggler] = UseDarkMode();\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\n  const themeText = theme === 'light' ? 'Light Mode' : 'Dark Mode';\n  const themeToggle = <Toggle theme={theme} themeText={themeText} toggleTheme={themeToggler} />;\n\n  const getSocketData = () => {\n    webSocket.current.onmessage = (msg) => {\n      setSocketData(JSON.parse(msg.data));\n    };\n  };\n\n  useEffect(() => {\n    webSocket.current = new WebSocket(\n      url.format({\n        protocol: window.location.protocol === 'https:' ? 'wss' : 'ws',\n        hostname: window.location.hostname,\n        port: window.location.port || 7000,\n        pathname: '/ws',\n        slashes: true,\n      })\n    );\n    webSocket.current.onerror = () => {\n      setConnectionError(true);\n      setConnectionErrorMsg(`There was an error connecting to the web socket endpoint!`);\n    };\n  }, []);\n\n  useEffect(() => {\n    getSocketData();\n  }, [socketData]);\n\n  const reloadPage = () => {\n    window.location.reload(false);\n  }\n\n  return (\n    <ThemeProvider theme={themeMode}>\n      <SetTitle />\n      <GlobalStyles />\n      <Snackbar \n        anchorOrigin={{vertical: 'top', horizontal: 'center'}}\n        open={connectionError}>\n          <ThemedErrorAlert \n            severity=\"error\"\n            action={\n              <ThemedIconAlert component=\"span\" size=\"small\" onClick={reloadPage}>\n                <CachedIcon/>\n              </ThemedIconAlert>\n            }>\n            {connectionErrorMsg}\n          </ThemedErrorAlert>\n      </Snackbar>\n\n      <TopNavBar\n        themeToggle={themeToggle}\n      tabs={\n        [\n          [<CommandFormGrid />, <CommandHistory socketData={socketData}/>, <LatestCommand socketData={socketData}/>],\n          [<PluginsList />],\n          [<ThemedJSONViewer key=\"json-viewer\"\n            src={socketData} \n            iconStyle=\"square\" \n            collapsed={2} \n            displayDataTypes={false} \n            theme={theme === 'light' ? {\n                base00: 'rgba(0, 0, 0, 0)',\n                base01: 'rgb(245, 245, 245)',\n                base02: '#2e2e2e',\n                base03: '#93a1a1',\n                base04: 'rgba(0, 0, 0, 0.3)',\n                base05: '#586e75',\n                base06: '#073642',\n                base07: '#002b36',\n                base08: '#d33682',\n                base09: '#cb4b16',\n                base0A: '#dc322f',\n                base0B: '#859900',\n                base0C: '#6c71c4',\n                base0D: '#586e75',\n                base0E: '#2aa198',\n                base0F: '#268bd2'\n              } : {\n                base00: \"rgba (0, 0, 0, 0)\",\n                base01: \"#202020\",\n                base02: \"#c2c2c2\",\n                base03: \"#505050\",\n                base04: \"#b0b0b0\",\n                base05: \"#d0d0d0\",\n                base06: \"#e0e0e0\",\n                base07: \"#ffffff\",\n                base08: \"#eb008a\",\n                base09: \"#f29333\",\n                base0A: \"#f8ca12\",\n                base0B: \"#37b349\",\n                base0C: \"#00aabb\",\n                base0D: \"#0e5a94\",\n                base0E: \"#b31e8d\",\n                base0F: \"#7a2d00\"\n              }\n            } />],\n        ]\n        }\n      />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react';\r\nexport const UseDarkMode = () => {\r\n    const [theme, setTheme] = useState('light');\r\n\r\n    const setMode = mode => {\r\n        window.localStorage.setItem('theme', mode)\r\n        setTheme(mode)\r\n    };\r\n\r\n    const themeToggler = () => {\r\n        theme === 'light' ? setMode('dark') : setMode('light')\r\n    };\r\n\r\n    useEffect(() => {\r\n        const localTheme = window.localStorage.getItem('theme');\r\n        localTheme && setTheme(localTheme)\r\n    }, []);\r\n    return [theme, themeToggler]\r\n};\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}